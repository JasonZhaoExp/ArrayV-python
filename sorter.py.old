from consolemenu import SelectionMenu
import importlib
import termcolor
import pyfiglet
import subprocess
import os
import time

import arraygen

class SortingClass:
    def __init__(self):
        self.array_size = 1024
        self.sorts_dir = "./sorts/"

    

    def print_title(self, text):
        print(termcolor.colored(
            pyfiglet.figlet_format(text) + """
        Version 0.1, Developed by insideoutsidein""", "green"))

    def check_sorted(self, array):
        for index, item in enumerate(array[:-1]):
            if item <= array[index+1]:
                pass
            else:
                return False
        return True

    def test_single_algorithm(self, repeat_count=5):
        files = os.listdir(self.sorts_dir)
        imports = []
        algorithms = []

        for file in files:
            if file.endswith(".py"):
                filename = file[:-4]
                sorting = importlib.import_module(filename)
                algorithms.append(sorting.name)
                imports.append(filename)

        selection_index = SelectionMenu.get_selection(algorithms)

        sorting = importlib.import_module(imports[selection_index])

        successful_times_taken = []

        for i in range(1, repeat_count+1):
            random_array = arraygen.generate_random_sequenced_array(self.array_size)
            time1 = time.perf_counter()
            sorted_array = sorting.sort(random_array)
            time2 = time.perf_counter()
            print(f"Test {i}")
            print(f"Unsorted array: {random_array}")
            if self.check_sorted(sorted_array):  # Call the check_sorted() method using self
                print(termcolor.colored(f"""Sorted array: {sorted_array}
                                        Time taken: {time2 - time1}s"""),"green")
                successful_times_taken.append(time2-time1)
            else:
                print(termcolor.colored(f"""Array failed to sort
                                        Time taken: {time2 - time1}s"""),"red")
        total = 0
        count = 0
        for i in successful_times_taken:
            total += i
            count += 1
        
        try:
            average = total / count
            print(termcolor.colored(f"Average time taken: {average}s"),"green")
            print("\n\n")
        except:
            print(f"No successful tests")

    def test_all(self, repeat_count=5):
        files = os.listdir(self.sorts_dir)
        algorithms = []
        module_names = []

        for file in files:
            if file.endswith(".py") and file != "__init__.py":
                module_name = f"sorts.{file[:-3]}"
                sorting = importlib.import_module(module_name)
                algorithms.append(sorting.name)
                module_names.append(module_name)
        
        for index, algorithm_import in enumerate(module_names):
            try:
                sorting = importlib.import_module(algorithm_import)
            except ImportError:
                print(f"Sorting algorithm not found: {algorithms[index]}")
                continue
            
            print(f"""Sorting with algorithm: {algorithms[index]}""")
            
            successful_times_taken = []

            for i in range(1, repeat_count+1):
                random_array = arraygen.generate_random_sequenced_array(self.array_size)
                time1 = time.perf_counter()
                sorted_array = sorting.sort(random_array)
                time2 = time.perf_counter()

                print(f"Test {i}")
                print(f"Unsorted array: {random_array}")

                if self.check_sorted(sorted_array):  # Call the check_sorted() method using self
                    print(termcolor.colored(f"""Sorted array: {sorted_array}
                                            Time taken: {time2 - time1}s"""),"green")
                    successful_times_taken.append(time2-time1)
                else:
                    print(termcolor.colored(f"""Array failed to sort
                                            Time taken: {time2 - time1}s"""),"red")

            total = 0
            count = 0

            for i in successful_times_taken:
                total += i
                count += 1
            
            average = total / count
            print(termcolor.colored(f"Average time taken: {average}s"),"green")
            print("\n\n")


    def main(self):
        self.print_title("Sorting algorithm testing")
        time.sleep(3)
        self.clear()

        while True:
            tests = ["Test all algorithms", "Test single algorithm"]
            
            self.print_title("Menu")
            selection_index = SelectionMenu.get_selection(tests)
            self.clear()

            if selection_index == 0:
                self.test_all()
            elif selection_index == 1:
                self.test_single_algorithm()

if __name__ == "__main__":
    sorting_instance = SortingClass()
    sorting_instance.main()